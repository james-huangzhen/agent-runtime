// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: sandbox/v1/sandbox.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSandboxServiceCreateSandbox = "/sandbox.v1.SandboxService/CreateSandbox"
const OperationSandboxServiceDeleteSandbox = "/sandbox.v1.SandboxService/DeleteSandbox"
const OperationSandboxServiceGetSandBoxTypes = "/sandbox.v1.SandboxService/GetSandBoxTypes"
const OperationSandboxServiceGetSandboxStatus = "/sandbox.v1.SandboxService/GetSandboxStatus"

type SandboxServiceHTTPServer interface {
	CreateSandbox(context.Context, *CreateSandboxRequest) (*CreateSandboxResponse, error)
	DeleteSandbox(context.Context, *DeleteSandboxRequest) (*DeleteSandboxResponse, error)
	GetSandBoxTypes(context.Context, *GetSandboxTypesRequest) (*GetSandboxTypesResponse, error)
	GetSandboxStatus(context.Context, *GetSandboxStatusRequest) (*GetSandboxStatusResponse, error)
}

func RegisterSandboxServiceHTTPServer(s *http.Server, srv SandboxServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/sandbox", _SandboxService_CreateSandbox0_HTTP_Handler(srv))
	r.DELETE("/api/v1/sandbox", _SandboxService_DeleteSandbox0_HTTP_Handler(srv))
	r.GET("/api/v1/sandbox", _SandboxService_GetSandboxStatus0_HTTP_Handler(srv))
	r.GET("/api/v1/sandbox/types", _SandboxService_GetSandBoxTypes0_HTTP_Handler(srv))
}

func _SandboxService_CreateSandbox0_HTTP_Handler(srv SandboxServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSandboxRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSandboxServiceCreateSandbox)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSandbox(ctx, req.(*CreateSandboxRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSandboxResponse)
		return ctx.Result(200, reply)
	}
}

func _SandboxService_DeleteSandbox0_HTTP_Handler(srv SandboxServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSandboxRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSandboxServiceDeleteSandbox)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSandbox(ctx, req.(*DeleteSandboxRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSandboxResponse)
		return ctx.Result(200, reply)
	}
}

func _SandboxService_GetSandboxStatus0_HTTP_Handler(srv SandboxServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSandboxStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSandboxServiceGetSandboxStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSandboxStatus(ctx, req.(*GetSandboxStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSandboxStatusResponse)
		return ctx.Result(200, reply)
	}
}

func _SandboxService_GetSandBoxTypes0_HTTP_Handler(srv SandboxServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSandboxTypesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSandboxServiceGetSandBoxTypes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSandBoxTypes(ctx, req.(*GetSandboxTypesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSandboxTypesResponse)
		return ctx.Result(200, reply)
	}
}

type SandboxServiceHTTPClient interface {
	CreateSandbox(ctx context.Context, req *CreateSandboxRequest, opts ...http.CallOption) (rsp *CreateSandboxResponse, err error)
	DeleteSandbox(ctx context.Context, req *DeleteSandboxRequest, opts ...http.CallOption) (rsp *DeleteSandboxResponse, err error)
	GetSandBoxTypes(ctx context.Context, req *GetSandboxTypesRequest, opts ...http.CallOption) (rsp *GetSandboxTypesResponse, err error)
	GetSandboxStatus(ctx context.Context, req *GetSandboxStatusRequest, opts ...http.CallOption) (rsp *GetSandboxStatusResponse, err error)
}

type SandboxServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSandboxServiceHTTPClient(client *http.Client) SandboxServiceHTTPClient {
	return &SandboxServiceHTTPClientImpl{client}
}

func (c *SandboxServiceHTTPClientImpl) CreateSandbox(ctx context.Context, in *CreateSandboxRequest, opts ...http.CallOption) (*CreateSandboxResponse, error) {
	var out CreateSandboxResponse
	pattern := "/api/v1/sandbox"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSandboxServiceCreateSandbox))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SandboxServiceHTTPClientImpl) DeleteSandbox(ctx context.Context, in *DeleteSandboxRequest, opts ...http.CallOption) (*DeleteSandboxResponse, error) {
	var out DeleteSandboxResponse
	pattern := "/api/v1/sandbox"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSandboxServiceDeleteSandbox))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SandboxServiceHTTPClientImpl) GetSandBoxTypes(ctx context.Context, in *GetSandboxTypesRequest, opts ...http.CallOption) (*GetSandboxTypesResponse, error) {
	var out GetSandboxTypesResponse
	pattern := "/api/v1/sandbox/types"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSandboxServiceGetSandBoxTypes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SandboxServiceHTTPClientImpl) GetSandboxStatus(ctx context.Context, in *GetSandboxStatusRequest, opts ...http.CallOption) (*GetSandboxStatusResponse, error) {
	var out GetSandboxStatusResponse
	pattern := "/api/v1/sandbox"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSandboxServiceGetSandboxStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
